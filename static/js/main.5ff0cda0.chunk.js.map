{"version":3,"sources":["components/Calendar/Calendar.styles.js","components/Calendar/index.js","components/Calendar/Calendar.js","serviceWorker.js","index.js"],"names":["Cal","styled","div","Day","Room","p","Label","label","Calendar","roomsArray","uncheckedRooms","useState","numOfDays","setNumOfDays","numOfDaysArray","Array","from","keys","numOfChecks","setNumOfChecks","isDisabled","changeIsDisabled","randomNumber","num","Math","floor","random","RoomCheck","dailyChecks","length","i","rand","removedNum","splice","push","htmlFor","id","onChange","e","preventDefault","input","Number","target","value","alert","handleChecksOnChange","placeholder","disabled","map","day","key","console","log","pop","RoomCalculator","room","j","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.5ff0cda0.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Cal = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n`;\n\t\nexport const Day = styled.div`\n\twidth: calc(14% - 100px);\n\tmargin: 50px; \n`;\n\nexport const Room = styled.p`\n\tfont-weight: bold;\n`;\n\nexport const Label = styled.label`\n  margin-right: 20px;\n`;","import Calendar from './Calendar';\r\n\r\nexport default Calendar;\r\n","import React, { useState } from 'react';\nimport {\n\tCal,\n\tDay,\n\tRoom,\n\tLabel\n} from './Calendar.styles';\n\nconst Calendar = () => {\n\tconst roomsArray = [\n\t\t227,\n\t\t228,\n\t\t229,\n\t\t230,\n\t\t231,\n\t\t232,\n\t\t233,\n\t\t234,\n\t\t235,\n\t\t236,\n\t\t237,\n\t\t238,\n\t\t239,\n\t\t242,\n\t\t243,\n\t\t244,\n\t\t245,\n\t\t246,\n\t\t247,\n\t\t248,\n\t\t249,\n\t\t250,\n\t\t251,\n\t\t252,\n\t\t253\n\t];\n\tlet uncheckedRooms = [...roomsArray];\n\tconst [numOfDays, setNumOfDays] = useState(null);\n\tconst numOfDaysArray = Array.from(Array(numOfDays).keys());\n\tconst [numOfChecks, setNumOfChecks] = useState(null);\n\tconst [isDisabled, changeIsDisabled] = useState(false);\n\tconst randomNumber = (num) => Math.floor(Math.random() * num);\n\n\tconst RoomCheck = (dailyChecks) => {\n\t\tif (!dailyChecks.length) {\n\t\t\tfor (let i = 0; i < numOfChecks; i++) {\n\t\t\t\tconst rand = randomNumber(uncheckedRooms.length)\n\t\t\t\tconst removedNum = uncheckedRooms.splice(rand, 1)[0];\n\t\t\t\tdailyChecks.push(removedNum);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < numOfChecks; i++) {\n\t\t\t\tconst rand = randomNumber(uncheckedRooms.length)\n\t\t\t\tconst removedNum = uncheckedRooms.splice(rand, 1)[0];\n\t\t\t\tdailyChecks.push(removedNum);\n\t\t\t\tif (dailyChecks.length === numOfChecks) return;\n\t\t\t}\n\t\t}\n\t};\n\n\tconst RoomCalculator = (i) => {\n\t\tconsole.log('Day', i + 1)\n\t\tconst dailyChecks = [];\n\t\tif (uncheckedRooms.length <= numOfChecks) {\n\t\t\tfor (let i = 0; i < numOfChecks; i++) {\n\t\t\t\tif (uncheckedRooms.length) dailyChecks.push(uncheckedRooms.pop());\n\t\t\t};\n\t\t\tif (dailyChecks.length < numOfChecks) {\n\t\t\t\tuncheckedRooms = [...roomsArray];\n\t\t\t\tRoomCheck(dailyChecks);\n\t\t\t}\n\t\t} else {\n\t\t\tRoomCheck(dailyChecks);\n\t\t}\n\t\treturn dailyChecks;\n\t};\n\n\tconst handleChecksOnChange = (e) => {\n\t\te.preventDefault();\n\t\tconst input = Number(e.target.value)\n\t\tif (!input && e.target.value !== '') {\n\t\t\talert('value must be a number')\n\t\t\te.target.value = '';\n\t\t}\n\t\tsetNumOfChecks(input)\n\t\tfor (let i = input; i < 100; i++) { \n\t\t\tif (i % input === 0 && (i > uncheckedRooms.length || i * input === uncheckedRooms.length)) {\n\t\t\t\tsetNumOfDays(i);\n\t\t\t\tchangeIsDisabled(!isDisabled);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<h1>Room Check Planner</h1>\n\t\t\t<Label htmlFor=\"numOfChecks\">How many rooms per day would you like to schedule?</Label>\n\t\t\t<input id=\"numOfChecks\" onChange={(e)=> handleChecksOnChange(e)} placeholder=\"3\" disabled={isDisabled}></input>\n\t\t\t<Cal>\n\t\t\t\t{numOfChecks && numOfDays &&\n\t\t\t\tnumOfDaysArray.map((day, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t<Day key={`Day ${i}`}>\n\t\t\t\t\t\t<h3>Day {i + 1}</h3>\n\t\t\t\t\t\t\t{RoomCalculator(i).map((room, j) => <Room key={`Day ${i} Room ${j}`}>Room {room}</Room>)}\n\t\t\t\t\t</Day>\n\t\t\t\t)})}\n\t\t\t</Cal>\n\t\t</>\n\t\t);\n};\n\nexport default Calendar;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Calendar from './components/Calendar';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Calendar />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}